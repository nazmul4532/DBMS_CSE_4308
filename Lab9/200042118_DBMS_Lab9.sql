-- WARMUP TASK A
SET SERVEROUTPUT ON SIZE 1000000
BEGIN
    DBMS_OUTPUT.PUT_LINE('My Name is M M Nazmul Hossain');
END;
/
-- WARMUP TASK B
DECLARE
    USERNAME VARCHAR2(20);
BEGIN
    USERNAME := '&username';
    DBMS_OUTPUT.PUT_LINE('The length of the user name is '
        ||LENGTH(USERNAME));
END;
/
-- WARMUP TASK C
DECLARE
    VARA    NUMBER;
    VARB    NUMBER;
    PRODUCT NUMBER;
BEGIN
    VARA :='&VarA';
    VARB :='&VarB';
    PRODUCT := VARA*VARB;
    DBMS_OUTPUT.PUT_LINE('The Product of the two input variables are : '
        ||PRODUCT);
END;
/
-- WAMRUP TASK D
DECLARE
    D    DATE;
BEGIN 
    D := SYSDATE();
    DBMS_OUTPUT.PUT_LINE(TO_CHAR(D, 'DD-MON-YYYY HH12:MI:SS'));
END;
/
-- WARMUP TASK E

-- WITHOUT CASE

DECLARE
    VAR NUMBER(10,2);
BEGIN 
    VAR := '&number';
    IF VAR = ROUND(VAR) THEN
        DBMS_OUTPUT.PUT_LINE('It is a Whole Number');
    ELSE
        DBMS_OUTPUT.PUT_LINE ( 'It is a Fraction.');
    END IF;
END;
/

-- WITH CASE

DECLARE
    VAR NUMBER(10,2);
BEGIN
    VAR := '&NUMBER';
    CASE TRUE
        WHEN VAR = ROUND(VAR) THEN
            DBMS_OUTPUT.PUT_LINE ( 'It is a Whole Number.');
        ELSE
            DBMS_OUTPUT.PUT_LINE ( 'It is a Fraction.');
    END CASE;
END;
/

-- WARMUP TASK F
CREATE OR REPLACE
PROCEDURE FIND_COMPOSITE( NUM IN NUMBER , VERDICT OUT VARCHAR2 )
AS
BEGIN
    VERDICT := 'Number is not Composite';
    FOR i IN 2 .. (NUM/2)
        LOOP
            IF MOD(NUM, i) = 0 THEN
                VERDICT := 'Number is Composite';
                EXIT;
            END IF;
        END LOOP;

END;
/

DECLARE
    NUM NUMBER(5);
    VERIFY VARCHAR2(30);
BEGIN 
    NUM := '&number';
    FIND_COMPOSITE(NUM,VERIFY);
    DBMS_OUTPUT.PUT_LINE (VERIFY);

END;
/

-- TASK 2 A
CREATE OR REPLACE
PROCEDURE FIND_MOVIES(NUM IN NUMBER)
AS
ROWNUMS NUMBER(10);
CURSOR MOV_INFO IS
    SELECT *
    FROM (SELECT MOV_ID,MOV_TITLE,MAX(MOV_YEAR) AS MOV_YEAR,MAX(MOV_LANGUAGE) AS MOV_LANGUAGE,MAX(MOV_RELEASEDATE) AS MOV_RELEASEDATE,MAX(MOV_COUNTRY) AS MOV_COUNTRY, AVG(REV_STARS) AS AVG_RATING
    FROM MOVIE NATURAL JOIN RATING
    GROUP BY MOV_ID,MOV_TITLE
    ORDER BY AVG_RATING DESC)
    WHERE ROWNUM<=NUM;
BEGIN
    SELECT MAX(ROWNUM) INTO ROWNUMS
    FROM (SELECT MOV_ID,MOV_TITLE,MAX(MOV_YEAR) AS MOV_YEAR,MAX(MOV_LANGUAGE) AS MOV_LANGUAGE,MAX(MOV_RELEASEDATE) AS MOV_RELEASEDATE,MAX(MOV_COUNTRY) AS MOV_COUNTRY, AVG(REV_STARS) AS AVG_RATING FROM MOVIE NATURAL JOIN RATING GROUP BY MOV_ID,MOV_TITLE ORDER BY AVG_RATING DESC);

    CASE TRUE
    WHEN (NUM>ROWNUMS) THEN 
        DBMS_OUTPUT.PUT_LINE ('Input exceeds number of entries');

    ELSE 
        DBMS_OUTPUT.PUT_LINE ('MOV_TITLE' || chr(9) || 'MOV_YEAR' || chr(9) || 'MOV_LANGUAGE' || chr(9)  || 'MOV_RELEASEDATE' || chr(9)  || 'MOV_COUNTRY');
        FOR i IN MOV_INFO LOOP
        DBMS_OUTPUT.PUT_LINE (i.MOV_TITLE || chr(9) || i.MOV_YEAR || chr(9) || i.MOV_LANGUAGE || chr(9)  || i.MOV_RELEASEDATE || chr(9)  || i.MOV_COUNTRY);
        END LOOP;
    END CASE;

END;
/

DECLARE
    NUM NUMBER(10);
BEGIN 
    NUM := '&number';
    FIND_MOVIES(NUM);

END;
/

-- TASK 2 B
CREATE OR REPLACE
PROCEDURE INSERT_STATUS(MOVIE_TITLE IN VARCHAR2)
AS
CURSOR MOV_INFO IS
    SELECT MOV_ID, MOV_TITLE, COUNT(ACT_ID) AS NO_OF_ACTORS 
    FROM MOVIE NATURAL JOIN CASTS
    WHERE MOV_TITLE = MOVIE_TITLE
    GROUP BY MOV_ID, MOV_TITLE;
BEGIN
    FOR i in MOV_INFO LOOP
        IF i.NO_OF_ACTORS<=1 THEN
            DBMS_OUTPUT.PUT_LINE('SOLO');
        ELSE
            DBMS_OUTPUT.PUT_LINE('ENSEMBLE');
        END IF;
    END LOOP;
END;
/
DECLARE
    MOVIE_TITLE VARCHAR2(20);
BEGIN 
    MOVIE_TITLE := '&title';
    INSERT_STATUS(MOVIE_TITLE);
END;
/

-- TASK 2 C

CREATE OR REPLACE
PROCEDURE GIVE_OSCAR
AS
CURSOR MOV_INFO IS
    SELECT DIR_ID, MAX(DIR_FIRSTNAME) AS DIR_FIRSTNAME, MAX(DIR_LASTNAME) AS DIR_LASTNAME
    FROM (SELECT MOV_ID,MOV_TITLE, AVG(REV_STARS) AS AVG_RATING, COUNT(REV_STARS) AS NO_OF_REVIEWS
    FROM MOVIE NATURAL JOIN RATING
    GROUP BY MOV_ID,MOV_TITLE
    ORDER BY AVG_RATING DESC
    ) MOV NATURAL JOIN DIRECTOR
    WHERE AVG_RATING >=7 AND NO_OF_REVIEWS >=10
    GROUP BY DIR_ID
    ORDER BY DIR_ID;
BEGIN
    DBMS_OUTPUT.PUT_LINE('DIR_ID'||chr(9)||'DIR_FIRSTNAME'||chr(9)||'DIR_LASTNAME');
    FOR i in MOV_INFO LOOP
        DBMS_OUTPUT.PUT_LINE(i.DIR_ID || chr(9)|| i.DIR_FIRSTNAME || chr(9) || i.DIR_LASTNAME);
    END LOOP;
END;
/

BEGIN
GIVE_OSCAR();
END;
/

-- TASK 2 D
